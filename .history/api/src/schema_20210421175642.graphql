type Mutation {
  createBOM(
    productName: String!
    BOMName: String!
    bomDetail: [_BOMDetail]!
  ): BOM!
    @cypher(
      statement: """
      UNWIND $bomDetail AS detail
      MATCH (product:Material{name: $productName})
      MATCH (material:Material {name: detail.name})
      MERGE (bom:BOM {name: $BOMName})
       ON CREATE SET bom.id = apoc.create.uuid()
      MERGE (product)-[:HAS_BOM]->(bom)
      MERGE (bom)-[:USES_MATERIAL {amount: detail.amount}]->(material)
      RETURN bom
      """
    )
  createCraft(
    productName: String!
    craftName: String!
    craftDetail: [_craftDetail!]!
  ): Craft!
    @cypher(
      statement: """
      MATCH (product:Material{name: $productName})
      MERGE (craft:Craft {name: $craftName})
        ON CREATE SET craft.id = apoc.create.uuid()
      MERGE (product)-[:HAS_CRAFT]->(craft)
      WITH craft

      MATCH (first:Procedure {name: $craftDetail[0].name})
      MATCH (last:Procedure {name: $craftDetail[-1].name})
      MERGE (craft)-[fp:HAS_PROCEDURE {is_first: true}]->(first)
      MERGE (craft)-[lp:HAS_PROCEDURE {is_last: true}]->(last)
      WITH craft

      // TODO: Will throw error when only one procedure.
      UNWIND $craftDetail AS detail
      MATCH (procedure:Procedure {name: detail.name})
      MATCH (next:Procedure {name: detail.next})
      WHERE detail.next IS NOT NULL
      MERGE (craft)-[:HAS_PROCEDURE]->(procedure)
      MERGE (procedure)-[:NEXT]->(next)

      RETURN craft
      """
    )

  createOrder(
    productName: String!
    craftName: String!
    orderId: ID
  ): WorkOrder!
    @cypher(
      statement: """
      // Create order.
       MATCH (product:Material{name: $productName})
       MERGE (product)<-[:HAS_PRODUCT]-(order:WorkOrder {id: apoc.create.uuid()})
         ON CREATE SET order.is_completed = false
       WITH order

       // Create tasks from craft.
       MATCH (craft:Craft {name: $craftName})-[:HAS_PROCEDURE]->(procedure:Procedure)
       MERGE (order)-[:USES_CRAFT]->(craft)
       MERGE (procedure)<-[:USES_PROCEDURE]-(task:ProcedureTask {id: apoc.create.uuid()})
         ON CREATE SET task.name = procedure.name
       WITH order, task, craft

       // Link tasks to order.
       MATCH (craft)-[:HAS_PROCEDURE {is_first: true}]->(:Procedure)<-[:USES_PROCEDURE]-(first:ProcedureTask)
       MATCH (craft)-[:HAS_PROCEDURE {is_last: true}]->(:Procedure)<-[:USES_PROCEDURE]-(last:ProcedureTask)
       MERGE (order)-[:HAS_TASK {is_first: true}]->(first)
       MERGE (order)-[:HAS_TASK {is_last: true}]->(last)
       MERGE (order)-[:HAS_TASK]->(task)
       WITH order, task

       // Add order to tasks
       MATCH (task)-[:USES_PROCEDURE]->(:Procedure)-[:NEXT]->(:Procedure)<-[:USES_PROCEDURE]-(nextTask:ProcedureTask)<-[:HAS_TASK]-(order)
       MERGE (task)-[:NEXT]->(nextTask)

       RETURN order
      """
    )
}

type WorkOrder {
  id: ID! @id
  is_completed: Boolean!
  schedule_date: String
  has_product: [Material] @relation(name: "HAS_PRODUCT", direction: OUT)
  HAS_PRODUCT_rel: [HAS_PRODUCT]
  has_task: [ProcedureTask] @relation(name: "HAS_TASK", direction: OUT)
}

type ProcedureTask {
  id: ID! @id
  name: String!
  is_completed: Boolean!
  uses_procedure: [Procedure] @relation(name: "USES_PROCEDURE", direction: OUT)
  users: [User] @relation(name: "EXECUTES", direction: IN)
}

type User {
  id: ID! @id
  name: String! @unique
  executes: [ProcedureTask] @relation(name: "EXECUTES", direction: OUT)
  EXECUTES_rel: [EXECUTES]
}

type Craft {
  id: ID! @id
  name: String! @unique
  uses_bom: [BOM] @relation(name: "USES_BOM", direction: OUT)
  first_procedure: [Procedure]
    @relation(name: "FIRST_PROCEDURE", direction: OUT)
  last_procedure: [Procedure] @relation(name: "LAST_PROCEDURE", direction: OUT)
  has_procedure: [Procedure] @relation(name: "HAS_PROCEDURE", direction: OUT)
  HAS_PROCEDURE_rel: [HAS_PROCEDURE]
  materials: [Material] @relation(name: "HAS_CRAFT", direction: IN)
}

type Procedure {
  id: ID! @id
  name: String! @unique
  next: [Procedure] @relation(name: "NEXT", direction: OUT)
  crafts_first_procedure: [Craft]
    @relation(name: "FIRST_PROCEDURE", direction: IN)
  crafts_last_procedure: [Craft]
    @relation(name: "LAST_PROCEDURE", direction: IN)
  proceduretasks_uses_procedure: [ProcedureTask]
    @relation(name: "USES_PROCEDURE", direction: IN)
  crafts_has_procedure: [Craft] @relation(name: "HAS_PROCEDURE", direction: IN)
}

type Material {
  id: ID! @id
  name: String! @unique
  has_craft: [Craft] @relation(name: "HAS_CRAFT", direction: OUT)
  boms: [BOM] @relation(name: "USES_MATERIAL", direction: IN)
  workorders: [WorkOrder] @relation(name: "HAS_PRODUCT", direction: IN)
}

type BOM {
  id: ID! @id
  name: String! @unique
  uses_material: [Material] @relation(name: "USES_MATERIAL", direction: OUT)
  USES_MATERIAL_rel: [USES_MATERIAL]
  crafts: [Craft] @relation(name: "USES_BOM", direction: IN)
}

type USES_MATERIAL @relation(name: "USES_MATERIAL") {
  from: BOM!
  to: Material!
  amount: Int!
}

type HAS_PRODUCT @relation(name: "HAS_PRODUCT") {
  from: WorkOrder!
  to: Material!
  amount: Int!
}

type EXECUTES @relation(name: "EXECUTES") {
  from: User!
  to: ProcedureTask!
  at_time: String!
}

type HAS_PROCEDURE @relation(name: "HAS_PROCEDURE") {
  from: Craft!
  to: Procedure!
  type: String
}

input _BOMDetail {
  name: String!
  amount: Int!
}

input _craftDetail {
  name: String!
  next: String
}
