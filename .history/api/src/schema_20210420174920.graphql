type Mutation {
  addProceduresNEXT(from_name: String!, to_name: String!): String!
    @cypher(
      statement: """
      MATCH (from:Procedure{name: $from_name}), (to:Procedure{name: $to_name})
      MERGE (from)-[:NEXT]->(to)
      RETURN from.name + '->' to.name
      """
    )
  createBOM: BOM!
    @cypher(
      statement: """
      WITH [{name: 'leg', amount: 4}, {name: 'board', amount: 1}] AS input, 'table' AS product_name
         UNWIND input AS raw

      MATCH (product:Material{name: product_name})
      MERGE (product)-[:HAS_BOM]->(bom:BOM {name: 'TableBOM'})
      MERGE (bom)-[:USES_MATERIAL{amount: raw.amount}]->(r:Material {name: raw.name})
         RETURN bom
      """
    )
  #  createOrder(): Order! @cypher(statement: """

  #  """)
}

type WorkOrder {
  id: ID! @id
  is_completed: Boolean!
  schedule_date: DateTime!
  has_product: [Material] @relation(name: "HAS_PRODUCT", direction: OUT)
  HAS_PRODUCT_rel: [HAS_PRODUCT]
  has_task: [ProcedureTask] @relation(name: "HAS_TASK", direction: OUT)
}

type ProcedureTask {
  id: ID! @id
  is_completed: Boolean!
  uses_procedure: [Procedure] @relation(name: "USES_PROCEDURE", direction: OUT)
  users: [User] @relation(name: "EXECUTES", direction: IN)
}

type User {
  id: ID! @id
  name: String! @unique
  executes: [ProcedureTask] @relation(name: "EXECUTES", direction: OUT)
  EXECUTES_rel: [EXECUTES]
}

type Craft {
  id: ID! @id
  name: String! @unique
  uses_bom: [BOM] @relation(name: "USES_BOM", direction: OUT)
  first_procedure: [Procedure]
    @relation(name: "FIRST_PROCEDURE", direction: OUT)
  last_procedure: [Procedure] @relation(name: "LAST_PROCEDURE", direction: OUT)
  has_procedure: [Procedure] @relation(name: "HAS_PROCEDURE", direction: OUT)
  HAS_PROCEDURE_rel: [HAS_PROCEDURE]
  materials: [Material] @relation(name: "HAS_CRAFT", direction: IN)
}

type Procedure {
  id: ID! @id
  name: String! @unique
  next: [Procedure] @relation(name: "NEXT", direction: OUT)
  crafts_first_procedure: [Craft]
    @relation(name: "FIRST_PROCEDURE", direction: IN)
  crafts_last_procedure: [Craft]
    @relation(name: "LAST_PROCEDURE", direction: IN)
  proceduretasks_uses_procedure: [ProcedureTask]
    @relation(name: "USES_PROCEDURE", direction: IN)
  crafts_has_procedure: [Craft] @relation(name: "HAS_PROCEDURE", direction: IN)
}

type Material {
  id: ID! @id
  name: String! @unique
  has_craft: [Craft] @relation(name: "HAS_CRAFT", direction: OUT)
  boms: [BOM] @relation(name: "USES_MATERIAL", direction: IN)
  workorders: [WorkOrder] @relation(name: "HAS_PRODUCT", direction: IN)
}

type BOM {
  id: ID! @id
  name: String! @unique
  uses_material: [Material] @relation(name: "USES_MATERIAL", direction: OUT)
  USES_MATERIAL_rel: [USES_MATERIAL]
  crafts: [Craft] @relation(name: "USES_BOM", direction: IN)
}

type USES_MATERIAL @relation(name: "USES_MATERIAL") {
  from: BOM!
  to: Material!
  amount: Int!
}

type HAS_PRODUCT @relation(name: "HAS_PRODUCT") {
  from: WorkOrder!
  to: Material!
  amount: Int!
}

type EXECUTES @relation(name: "EXECUTES") {
  from: User!
  to: ProcedureTask!
  at_time: String!
}

type HAS_PROCEDURE @relation(name: "HAS_PROCEDURE") {
  from: Craft!
  to: Procedure!
  type: String
}
